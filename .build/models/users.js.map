{
  "version": 3,
  "sources": ["../../models/users.ts"],
  "sourcesContent": ["import * as db from '../helpers/database'\nimport * as DTO from '../interface/users'\n\nexport const getById = async (id: any) => {\n  let query = \"SELECT * FROM users WHERE ID = ?\"\n  let values = [id]\n  let data = await db.run_query(query, values);\n  return data;\n}\n\nexport const getAll = async () => {\n  // TODO: use page, limit, order to give pagination\n  let query = \"SELECT * FROM users;\"\n  let data = await db.run_query(query, null);\n  return data;\n}\n\nexport const add = async (users: any) => {\n  let keys = Object.keys(users);\n  let values = Object.values(users);\n  let key = keys.join(',');\n  let param = '';\n  for (let i: number = 0; i < values.length; i++) { param += '?,' }\n  param = param.slice(0, -1);\n  let query = `INSERT INTO users (${key}) VALUES (${param})`;\n  try {\n    await db.run_insert(query, values);\n    return { status: 201 };\n  } catch (err: any) {\n    return err;\n  }\n}\n\nexport const update = async (id: number, user: DTO.iUsers) => {\n  let updateItem = ''\n  Object.entries(user).forEach(entry => {\n    const [key, value] = entry;\n    if (updateItem != '')\n      updateItem += ', '\n\n    updateItem += `${key} = '${value}'`\n    console.log(key, value);\n  })\n  let query = `UPDATE users SET ${updateItem} where id = ${id}`\n  try {\n    await db.run_update(query);\n    return { status: 201 };\n  } catch (err: any) {\n    return err;\n  }\n}\n\nexport const remove = async (id: number) => {\n  let query = `DELETE FROM users WHERE id = ${id};`\n  try {\n    await db.run_delete(query);\n    return { status: 201 };\n  } catch (err: any) {\n    return err;\n  }\n}\n\nexport const findByUsername = async (username: string) => {\n  const query = 'SELECT * FROM users where username = ?'\n  const user = await db.run_query(query, [username])\n  return user\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAoB;AAGb,MAAM,UAAU,OAAO,OAAY;AACxC,MAAI,QAAQ;AACZ,MAAI,SAAS,CAAC,EAAE;AAChB,MAAI,OAAO,MAAM,GAAG,UAAU,OAAO,MAAM;AAC3C,SAAO;AACT;AAEO,MAAM,SAAS,YAAY;AAEhC,MAAI,QAAQ;AACZ,MAAI,OAAO,MAAM,GAAG,UAAU,OAAO,IAAI;AACzC,SAAO;AACT;AAEO,MAAM,MAAM,OAAO,UAAe;AACvC,MAAI,OAAO,OAAO,KAAK,KAAK;AAC5B,MAAI,SAAS,OAAO,OAAO,KAAK;AAChC,MAAI,MAAM,KAAK,KAAK,GAAG;AACvB,MAAI,QAAQ;AACZ,WAAS,IAAY,GAAG,IAAI,OAAO,QAAQ,KAAK;AAAE,aAAS;AAAA,EAAK;AAChE,UAAQ,MAAM,MAAM,GAAG,EAAE;AACzB,MAAI,QAAQ,sBAAsB,gBAAgB;AAClD,MAAI;AACF,UAAM,GAAG,WAAW,OAAO,MAAM;AACjC,WAAO,EAAE,QAAQ,IAAI;AAAA,EACvB,SAAS,KAAP;AACA,WAAO;AAAA,EACT;AACF;AAEO,MAAM,SAAS,OAAO,IAAY,SAAqB;AAC5D,MAAI,aAAa;AACjB,SAAO,QAAQ,IAAI,EAAE,QAAQ,WAAS;AACpC,UAAM,CAAC,KAAK,KAAK,IAAI;AACrB,QAAI,cAAc;AAChB,oBAAc;AAEhB,kBAAc,GAAG,UAAU;AAC3B,YAAQ,IAAI,KAAK,KAAK;AAAA,EACxB,CAAC;AACD,MAAI,QAAQ,oBAAoB,yBAAyB;AACzD,MAAI;AACF,UAAM,GAAG,WAAW,KAAK;AACzB,WAAO,EAAE,QAAQ,IAAI;AAAA,EACvB,SAAS,KAAP;AACA,WAAO;AAAA,EACT;AACF;AAEO,MAAM,SAAS,OAAO,OAAe;AAC1C,MAAI,QAAQ,gCAAgC;AAC5C,MAAI;AACF,UAAM,GAAG,WAAW,KAAK;AACzB,WAAO,EAAE,QAAQ,IAAI;AAAA,EACvB,SAAS,KAAP;AACA,WAAO;AAAA,EACT;AACF;AAEO,MAAM,iBAAiB,OAAO,aAAqB;AACxD,QAAM,QAAQ;AACd,QAAM,OAAO,MAAM,GAAG,UAAU,OAAO,CAAC,QAAQ,CAAC;AACjD,SAAO;AACT;",
  "names": []
}
