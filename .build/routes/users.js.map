{
  "version": 3,
  "sources": ["../../routes/users.ts"],
  "sourcesContent": ["import Router, { RouterContext } from \"koa-router\";\nimport bodyParser from \"koa-bodyparser\";\nimport * as model from \"../models/users\"\nimport * as DTO from '../interface/users'\n\nimport { basicAuth } from '../controllers/auth'\nimport { validateUser } from '../controllers/validation'\n\nconst router = new Router({ prefix: '/api/v1/users' });\n\nconst getAll = async (ctx: RouterContext, next: any) => {\n  let user = await model.getAll()\n  if (user.length)\n    ctx.body = user\n  else\n    ctx.body = {}\n\n  await next()\n}\nconst getById = async (ctx: RouterContext, next: any) => {\n  let id = +ctx.params.id\n  let user = await model.getById(id);\n  if (user.length) {\n    ctx.body = user[0];\n  } else {\n    ctx.status = 404;\n  }\n\n  await next()\n}\nconst createUser = async (ctx: RouterContext, next: any) => {\n  const body = ctx.request.body;\n  let result = await model.add(body);\n  if (result.status == 201) {\n    ctx.status = 201;\n    ctx.body = body;\n  } else {\n    ctx.status = 500;\n    ctx.body = { err: \"insert data failed\" };\n  }\n\n  await next()\n}\nconst updateUser = async (ctx: RouterContext, next: any) => {\n  let id = +ctx.params.id\n  let loginUser = ctx.state.user\n  if (id != loginUser.user.id) {\n    ctx.status = 500\n    ctx.body = { err: \"You can't edit other user information!\" }\n  } else {\n    const body = <DTO.iUsers>ctx.request.body;\n    let result = await model.update(id, body)\n    if (result.status == 201) {\n      ctx.status = 201;\n      ctx.body = body;\n    } else {\n      ctx.status = 500;\n      ctx.body = { err: \"update data failed\" };\n    }\n  }\n\n  await next()\n}\nconst deleteUser = async (ctx: RouterContext, next: any) => {\n  let id = +ctx.params.id\n  let loginUser = ctx.state.user\n  if (id === loginUser.user.id) {\n    ctx.status = 500\n    ctx.body = { err: \"You can't remove your user, please remove other user!\" }\n  } else {\n    let result = await model.remove(id)\n    if (result.status == 201) {\n      ctx.status = 201;\n      ctx.body = { success: `success remove id = ${id} data` }\n    } else {\n      ctx.status = 500;\n      ctx.body = { err: \"delete data failed\" };\n    }\n  }\n\n\n  await next()\n}\n\nrouter.get('/', basicAuth, getAll);\nrouter.get('/:id([0-9]{1,})', basicAuth, getById);\nrouter.post('/', basicAuth, bodyParser(), validateUser, createUser);\nrouter.put('/:id([0-9]{1,})', basicAuth, bodyParser(), validateUser, updateUser);\nrouter.delete('/:id([0-9]{1,})', basicAuth, deleteUser);\n\nexport { router }"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAsC;AACtC,4BAAuB;AACvB,YAAuB;AAGvB,kBAA0B;AAC1B,wBAA6B;AAE7B,MAAM,SAAS,IAAI,kBAAAA,QAAO,EAAE,QAAQ,gBAAgB,CAAC;AAErD,MAAM,SAAS,OAAO,KAAoB,SAAc;AACtD,MAAI,OAAO,MAAM,MAAM,OAAO;AAC9B,MAAI,KAAK;AACP,QAAI,OAAO;AAAA;AAEX,QAAI,OAAO,CAAC;AAEd,QAAM,KAAK;AACb;AACA,MAAM,UAAU,OAAO,KAAoB,SAAc;AACvD,MAAI,KAAK,CAAC,IAAI,OAAO;AACrB,MAAI,OAAO,MAAM,MAAM,QAAQ,EAAE;AACjC,MAAI,KAAK,QAAQ;AACf,QAAI,OAAO,KAAK;AAAA,EAClB,OAAO;AACL,QAAI,SAAS;AAAA,EACf;AAEA,QAAM,KAAK;AACb;AACA,MAAM,aAAa,OAAO,KAAoB,SAAc;AAC1D,QAAM,OAAO,IAAI,QAAQ;AACzB,MAAI,SAAS,MAAM,MAAM,IAAI,IAAI;AACjC,MAAI,OAAO,UAAU,KAAK;AACxB,QAAI,SAAS;AACb,QAAI,OAAO;AAAA,EACb,OAAO;AACL,QAAI,SAAS;AACb,QAAI,OAAO,EAAE,KAAK,qBAAqB;AAAA,EACzC;AAEA,QAAM,KAAK;AACb;AACA,MAAM,aAAa,OAAO,KAAoB,SAAc;AAC1D,MAAI,KAAK,CAAC,IAAI,OAAO;AACrB,MAAI,YAAY,IAAI,MAAM;AAC1B,MAAI,MAAM,UAAU,KAAK,IAAI;AAC3B,QAAI,SAAS;AACb,QAAI,OAAO,EAAE,KAAK,yCAAyC;AAAA,EAC7D,OAAO;AACL,UAAM,OAAmB,IAAI,QAAQ;AACrC,QAAI,SAAS,MAAM,MAAM,OAAO,IAAI,IAAI;AACxC,QAAI,OAAO,UAAU,KAAK;AACxB,UAAI,SAAS;AACb,UAAI,OAAO;AAAA,IACb,OAAO;AACL,UAAI,SAAS;AACb,UAAI,OAAO,EAAE,KAAK,qBAAqB;AAAA,IACzC;AAAA,EACF;AAEA,QAAM,KAAK;AACb;AACA,MAAM,aAAa,OAAO,KAAoB,SAAc;AAC1D,MAAI,KAAK,CAAC,IAAI,OAAO;AACrB,MAAI,YAAY,IAAI,MAAM;AAC1B,MAAI,OAAO,UAAU,KAAK,IAAI;AAC5B,QAAI,SAAS;AACb,QAAI,OAAO,EAAE,KAAK,wDAAwD;AAAA,EAC5E,OAAO;AACL,QAAI,SAAS,MAAM,MAAM,OAAO,EAAE;AAClC,QAAI,OAAO,UAAU,KAAK;AACxB,UAAI,SAAS;AACb,UAAI,OAAO,EAAE,SAAS,uBAAuB,UAAU;AAAA,IACzD,OAAO;AACL,UAAI,SAAS;AACb,UAAI,OAAO,EAAE,KAAK,qBAAqB;AAAA,IACzC;AAAA,EACF;AAGA,QAAM,KAAK;AACb;AAEA,OAAO,IAAI,KAAK,uBAAW,MAAM;AACjC,OAAO,IAAI,mBAAmB,uBAAW,OAAO;AAChD,OAAO,KAAK,KAAK,2BAAW,sBAAAC,SAAW,GAAG,gCAAc,UAAU;AAClE,OAAO,IAAI,mBAAmB,2BAAW,sBAAAA,SAAW,GAAG,gCAAc,UAAU;AAC/E,OAAO,OAAO,mBAAmB,uBAAW,UAAU;",
  "names": ["Router", "bodyParser"]
}
