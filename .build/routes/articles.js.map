{
  "version": 3,
  "sources": ["../../routes/articles.ts"],
  "sourcesContent": ["import Router, { RouterContext } from \"koa-router\";\nimport bodyParser from \"koa-bodyparser\";\n\ninterface iArticles {\n  id: number\n  title: string\n  fullText: string\n  summary?: string\n  dateCreated: Date\n  dateModified?: Date\n  views: number\n  imageURL?: string\n  published: boolean\n  authorId?: number\n  categoryId?: number\n}\n\ninterface iArticlesArray extends Array<iArticles> { }\n\nconst dateNow = new Date()\n\nconst articles: iArticlesArray = [\n  { id: 1, title: 'hello article', fullText: 'some text here to fill the body', dateCreated: dateNow, views: 100, published: true },\n  { id: 2, title: 'another article', fullText: 'again here is some text here to fill', dateCreated: dateNow, views: 100, published: true },\n  { id: 3, title: 'coventry university ', fullText: 'some news about coventry university', dateCreated: dateNow, views: 100, published: true },\n  { id: 4, title: 'smart campus', fullText: 'smart campus is coming to IVE', dateCreated: dateNow, views: 100, published: true }\n];\n\n\nconst router = new Router({ prefix: '/api/v1/articles' });\n\nconst getAll = async (ctx: RouterContext, next: any) => {\n  ctx.body = articles\n\n  await next()\n}\nconst getById = async (ctx: RouterContext, next: any) => {\n  let id = +ctx.params.id\n  if ((id < articles.length + 1) && (id > 0)) {\n    ctx.body = articles[id - 1]\n  } else {\n    ctx.status = 404\n  }\n\n  await next()\n}\nconst createArticle = async (ctx: RouterContext, next: any) => {\n  let { title, fullText, summary, views, imageURL, published, authorId, categoryId } = <iArticles>ctx.request.body;\n  const lastestId = articles.at(-1)?.id ?? 0\n  let newArticle = { id: lastestId + 1, title: title, fullText: fullText, summary: summary, dateCreated: new Date(), views: views ?? 1, imageURL: imageURL, published: published ?? true, authorId: authorId, categoryId: categoryId }\n  articles.push(newArticle)\n  ctx.status = 201\n  ctx.body = newArticle\n\n  await next()\n}\nconst updateArticle = async (ctx: RouterContext, next: any) => {\n  let id = +ctx.params.id\n  if (!((id < articles.length + 1) && (id > 0))) {\n    ctx.status = 404\n  }\n\n  let { title, fullText, summary, views, imageURL, published, authorId, categoryId } = <iArticles>ctx.request.body;\n\n  articles[id - 1].title = title ?? articles[id - 1].title\n  articles[id - 1].fullText = fullText ?? articles[id - 1].fullText\n  articles[id - 1].summary = summary ?? articles[id - 1].summary\n  articles[id - 1].dateModified = new Date()\n  articles[id - 1].views = views ?? articles[id - 1].views\n  articles[id - 1].imageURL = imageURL ?? articles[id - 1].imageURL\n  articles[id - 1].published = published ?? articles[id - 1].published\n  articles[id - 1].authorId = authorId ?? articles[id - 1].authorId\n  articles[id - 1].categoryId = categoryId ?? articles[id - 1].categoryId\n\n  ctx.body = articles[id - 1]\n  await next()\n}\nconst deleteArticle = async (ctx: RouterContext, next: any) => {\n  let id = +ctx.params.id\n  if (!((id < articles.length + 1) && (id > 0))) {\n    ctx.status = 404\n  }\n  const objWithIdIndex = articles.findIndex((obj) => obj.id === id)\n  articles.splice(objWithIdIndex, 1)\n  ctx.status = 200\n\n  await next()\n}\n\nrouter.get('/', getAll);\nrouter.get('/:id([0-9]{1,})', getById);\nrouter.post('/', bodyParser(), createArticle);\nrouter.put('/:id([0-9]{1,})', bodyParser(), updateArticle);\nrouter.delete('/:id([0-9]{1,})', deleteArticle);\n\nexport { router }"],
  "mappings": "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",
  "names": ["Router", "bodyParser"]
}
