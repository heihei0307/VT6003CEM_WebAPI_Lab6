{
  "version": 3,
  "sources": ["../../routes/articles.ts"],
  "sourcesContent": ["import Router, { RouterContext } from \"koa-router\";\nimport bodyParser from \"koa-bodyparser\";\nimport * as model from \"../models/articles\"\nimport * as DTO from '../interface/articles'\n\nimport { basicAuth } from '../controllers/auth'\n\ninterface iArticles {\n  id: number\n  title: string\n  fullText: string\n  summary?: string\n  dateCreated: Date\n  dateModified?: Date\n  views: number\n  imageURL?: string\n  published: boolean\n  authorId?: number\n  categoryId?: number\n}\n\ninterface iArticlesArray extends Array<iArticles> { }\n\nconst dateNow = new Date()\n\nconst articles: iArticlesArray = [\n  { id: 1, title: 'hello article', fullText: 'some text here to fill the body', dateCreated: dateNow, views: 100, published: true },\n  { id: 2, title: 'another article', fullText: 'again here is some text here to fill', dateCreated: dateNow, views: 100, published: true },\n  { id: 3, title: 'coventry university ', fullText: 'some news about coventry university', dateCreated: dateNow, views: 100, published: true },\n  { id: 4, title: 'smart campus', fullText: 'smart campus is coming to IVE', dateCreated: dateNow, views: 100, published: true }\n];\n\n\nconst router = new Router({ prefix: '/api/v1/articles' });\n\nconst getAll = async (ctx: RouterContext, next: any) => {\n  let articlesSQL = await model.getAll()\n  if (articlesSQL.length)\n    ctx.body = articlesSQL\n  else\n    ctx.body = {}\n\n  await next()\n}\nconst getById = async (ctx: RouterContext, next: any) => {\n  let id = +ctx.params.id\n  let article = await model.getById(id);\n  if (article.length) {\n    ctx.body = article[0];\n  } else {\n    ctx.status = 404;\n  }\n  // if ((id < articles.length + 1) && (id > 0)) {\n  //   ctx.body = articles[id - 1]\n  // } else {\n  //   ctx.status = 404\n  // }\n\n  await next()\n}\nconst createArticle = async (ctx: RouterContext, next: any) => {\n  // let { title, fullText, summary, views, imageURL, published, authorId, categoryId } = <iArticles>ctx.request.body;\n  const body = ctx.request.body;\n  let result = await model.add(body);\n  if (result.status == 201) {\n    ctx.status = 201;\n    ctx.body = body;\n  } else {\n    ctx.status = 500;\n    ctx.body = { err: \"insert data failed\" };\n  }\n\n  // const lastestId = articles.at(-1)?.id ?? 0\n  // let newArticle = { id: lastestId + 1, title: title, fullText: fullText, summary: summary, dateCreated: new Date(), views: views ?? 1, imageURL: imageURL, published: published ?? true, authorId: authorId, categoryId: categoryId }\n  // articles.push(newArticle)\n  // ctx.status = 201\n  // ctx.body = newArticle\n\n  await next()\n}\nconst updateArticle = async (ctx: RouterContext, next: any) => {\n  let id = +ctx.params.id\n  // if (!((id < articles.length + 1) && (id > 0))) {\n  //   ctx.status = 404\n  // }\n\n  // let { title, fullText, summary, views, imageURL, published, authorId, categoryId } = <iArticles>ctx.request.body;\n\n  // articles[id - 1].title = title ?? articles[id - 1].title\n  // articles[id - 1].fullText = fullText ?? articles[id - 1].fullText\n  // articles[id - 1].summary = summary ?? articles[id - 1].summary\n  // articles[id - 1].dateModified = new Date()\n  // articles[id - 1].views = views ?? articles[id - 1].views\n  // articles[id - 1].imageURL = imageURL ?? articles[id - 1].imageURL\n  // articles[id - 1].published = published ?? articles[id - 1].published\n  // articles[id - 1].authorId = authorId ?? articles[id - 1].authorId\n  // articles[id - 1].categoryId = categoryId ?? articles[id - 1].categoryId\n\n  const body = <DTO.iArticles>ctx.request.body;\n  let result = await model.update(id, body)\n  // ctx.body = articles[id - 1]\n  if (result.status == 201) {\n    ctx.status = 201;\n    ctx.body = body;\n  } else {\n    ctx.status = 500;\n    ctx.body = { err: \"update data failed\" };\n  }\n  await next()\n}\nconst deleteArticle = async (ctx: RouterContext, next: any) => {\n  let id = +ctx.params.id\n  // if (!((id < articles.length + 1) && (id > 0))) {\n  //   ctx.status = 404\n  // }\n  // const objWithIdIndex = articles.findIndex((obj) => obj.id === id)\n  // articles.splice(objWithIdIndex, 1)\n  // ctx.status = 200\n  let result = await model.remove(id)\n  if (result.status == 201) {\n    ctx.status = 201;\n    ctx.body = { success: `success remove id = ${id} data` }\n  } else {\n    ctx.status = 500;\n    ctx.body = { err: \"delete data failed\" };\n  }\n\n  await next()\n}\n\nrouter.get('/', getAll);\nrouter.get('/:id([0-9]{1,})', getById);\nrouter.post('/', basicAuth, bodyParser(), createArticle);\nrouter.put('/:id([0-9]{1,})', basicAuth, bodyParser(), updateArticle);\nrouter.delete('/:id([0-9]{1,})', basicAuth, deleteArticle);\n\nexport { router }"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAsC;AACtC,4BAAuB;AACvB,YAAuB;AAGvB,kBAA0B;AAkB1B,MAAM,UAAU,IAAI,KAAK;AAEzB,MAAM,WAA2B;AAAA,EAC/B,EAAE,IAAI,GAAG,OAAO,iBAAiB,UAAU,mCAAmC,aAAa,SAAS,OAAO,KAAK,WAAW,KAAK;AAAA,EAChI,EAAE,IAAI,GAAG,OAAO,mBAAmB,UAAU,wCAAwC,aAAa,SAAS,OAAO,KAAK,WAAW,KAAK;AAAA,EACvI,EAAE,IAAI,GAAG,OAAO,wBAAwB,UAAU,uCAAuC,aAAa,SAAS,OAAO,KAAK,WAAW,KAAK;AAAA,EAC3I,EAAE,IAAI,GAAG,OAAO,gBAAgB,UAAU,iCAAiC,aAAa,SAAS,OAAO,KAAK,WAAW,KAAK;AAC/H;AAGA,MAAM,SAAS,IAAI,kBAAAA,QAAO,EAAE,QAAQ,mBAAmB,CAAC;AAExD,MAAM,SAAS,OAAO,KAAoB,SAAc;AACtD,MAAI,cAAc,MAAM,MAAM,OAAO;AACrC,MAAI,YAAY;AACd,QAAI,OAAO;AAAA;AAEX,QAAI,OAAO,CAAC;AAEd,QAAM,KAAK;AACb;AACA,MAAM,UAAU,OAAO,KAAoB,SAAc;AACvD,MAAI,KAAK,CAAC,IAAI,OAAO;AACrB,MAAI,UAAU,MAAM,MAAM,QAAQ,EAAE;AACpC,MAAI,QAAQ,QAAQ;AAClB,QAAI,OAAO,QAAQ;AAAA,EACrB,OAAO;AACL,QAAI,SAAS;AAAA,EACf;AAOA,QAAM,KAAK;AACb;AACA,MAAM,gBAAgB,OAAO,KAAoB,SAAc;AAE7D,QAAM,OAAO,IAAI,QAAQ;AACzB,MAAI,SAAS,MAAM,MAAM,IAAI,IAAI;AACjC,MAAI,OAAO,UAAU,KAAK;AACxB,QAAI,SAAS;AACb,QAAI,OAAO;AAAA,EACb,OAAO;AACL,QAAI,SAAS;AACb,QAAI,OAAO,EAAE,KAAK,qBAAqB;AAAA,EACzC;AAQA,QAAM,KAAK;AACb;AACA,MAAM,gBAAgB,OAAO,KAAoB,SAAc;AAC7D,MAAI,KAAK,CAAC,IAAI,OAAO;AAiBrB,QAAM,OAAsB,IAAI,QAAQ;AACxC,MAAI,SAAS,MAAM,MAAM,OAAO,IAAI,IAAI;AAExC,MAAI,OAAO,UAAU,KAAK;AACxB,QAAI,SAAS;AACb,QAAI,OAAO;AAAA,EACb,OAAO;AACL,QAAI,SAAS;AACb,QAAI,OAAO,EAAE,KAAK,qBAAqB;AAAA,EACzC;AACA,QAAM,KAAK;AACb;AACA,MAAM,gBAAgB,OAAO,KAAoB,SAAc;AAC7D,MAAI,KAAK,CAAC,IAAI,OAAO;AAOrB,MAAI,SAAS,MAAM,MAAM,OAAO,EAAE;AAClC,MAAI,OAAO,UAAU,KAAK;AACxB,QAAI,SAAS;AACb,QAAI,OAAO,EAAE,SAAS,uBAAuB,UAAU;AAAA,EACzD,OAAO;AACL,QAAI,SAAS;AACb,QAAI,OAAO,EAAE,KAAK,qBAAqB;AAAA,EACzC;AAEA,QAAM,KAAK;AACb;AAEA,OAAO,IAAI,KAAK,MAAM;AACtB,OAAO,IAAI,mBAAmB,OAAO;AACrC,OAAO,KAAK,KAAK,2BAAW,sBAAAC,SAAW,GAAG,aAAa;AACvD,OAAO,IAAI,mBAAmB,2BAAW,sBAAAA,SAAW,GAAG,aAAa;AACpE,OAAO,OAAO,mBAAmB,uBAAW,aAAa;",
  "names": ["Router", "bodyParser"]
}
