{
  "version": 3,
  "sources": ["../../helpers/database.ts"],
  "sourcesContent": ["import { Sequelize, QueryTypes } from 'sequelize';\nimport { config } from \"../config\";\n// define an async utility function to get a connection\n// run an SQL query then end the connection\nexport const run_query = async (query: string, values: any) => {\n  try {\n    const sequelize = new Sequelize(`postgres://${config.user}:${config.password}@${config.host}:${config.port}/${config.database}`);\n    await sequelize.authenticate();\n    let data = await sequelize.query(query, {\n      replacements: values,\n      type: QueryTypes.SELECT\n    });\n    await sequelize.close();\n    return data;\n  } catch (err: any) {\n    console.error(err, query, values);\n    throw 'Database query error';\n  }\n}\nexport const run_insert = async function run_insert(sql: string, values: any) {\n  try {\n    const sequelize = new Sequelize(`postgres://${config.user}:${config.password}@${config.host}:${config.port}/${config.database}`);\n    await sequelize.authenticate();\n    let data = await sequelize.query(sql, {\n      replacements: values,\n      type: QueryTypes.INSERT\n    });\n    await sequelize.close();\n    return data;\n  } catch (err: any) {\n    console.error(err, sql, values);\n    throw 'Database query error';\n  }\n}\n\nexport const run_update = async function run_update(sql: string) {\n  try {\n    const sequelize = new Sequelize(`postgres://${config.user}:${config.password}@${config.host}:${config.port}/${config.database}`);\n    await sequelize.authenticate();\n    let data = await sequelize.query(sql, {\n      type: QueryTypes.UPDATE\n    });\n    await sequelize.close();\n    return data;\n  } catch (err: any) {\n    console.error(err, sql);\n    throw 'Database query error';\n  }\n}\n\nexport const run_delete = async function run_delete(sql: string) {\n  try {\n    const sequelize = new Sequelize(`postgres://${config.user}:${config.password}@${config.host}:${config.port}/${config.database}`);\n    await sequelize.authenticate();\n    let data = await sequelize.query(sql, {\n      type: QueryTypes.DELETE\n    });\n    await sequelize.close();\n    return data;\n  } catch (err: any) {\n    console.error(err, sql);\n    throw 'Database query error';\n  }\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAsC;AACtC,oBAAuB;AAGhB,MAAM,YAAY,OAAO,OAAe,WAAgB;AAC7D,MAAI;AACF,UAAM,YAAY,IAAI,2BAAU,cAAc,qBAAO,QAAQ,qBAAO,YAAY,qBAAO,QAAQ,qBAAO,QAAQ,qBAAO,UAAU;AAC/H,UAAM,UAAU,aAAa;AAC7B,QAAI,OAAO,MAAM,UAAU,MAAM,OAAO;AAAA,MACtC,cAAc;AAAA,MACd,MAAM,4BAAW;AAAA,IACnB,CAAC;AACD,UAAM,UAAU,MAAM;AACtB,WAAO;AAAA,EACT,SAAS,KAAP;AACA,YAAQ,MAAM,KAAK,OAAO,MAAM;AAChC,UAAM;AAAA,EACR;AACF;AACO,MAAM,aAAa,eAAeA,YAAW,KAAa,QAAa;AAC5E,MAAI;AACF,UAAM,YAAY,IAAI,2BAAU,cAAc,qBAAO,QAAQ,qBAAO,YAAY,qBAAO,QAAQ,qBAAO,QAAQ,qBAAO,UAAU;AAC/H,UAAM,UAAU,aAAa;AAC7B,QAAI,OAAO,MAAM,UAAU,MAAM,KAAK;AAAA,MACpC,cAAc;AAAA,MACd,MAAM,4BAAW;AAAA,IACnB,CAAC;AACD,UAAM,UAAU,MAAM;AACtB,WAAO;AAAA,EACT,SAAS,KAAP;AACA,YAAQ,MAAM,KAAK,KAAK,MAAM;AAC9B,UAAM;AAAA,EACR;AACF;AAEO,MAAM,aAAa,eAAeC,YAAW,KAAa;AAC/D,MAAI;AACF,UAAM,YAAY,IAAI,2BAAU,cAAc,qBAAO,QAAQ,qBAAO,YAAY,qBAAO,QAAQ,qBAAO,QAAQ,qBAAO,UAAU;AAC/H,UAAM,UAAU,aAAa;AAC7B,QAAI,OAAO,MAAM,UAAU,MAAM,KAAK;AAAA,MACpC,MAAM,4BAAW;AAAA,IACnB,CAAC;AACD,UAAM,UAAU,MAAM;AACtB,WAAO;AAAA,EACT,SAAS,KAAP;AACA,YAAQ,MAAM,KAAK,GAAG;AACtB,UAAM;AAAA,EACR;AACF;AAEO,MAAM,aAAa,eAAeC,YAAW,KAAa;AAC/D,MAAI;AACF,UAAM,YAAY,IAAI,2BAAU,cAAc,qBAAO,QAAQ,qBAAO,YAAY,qBAAO,QAAQ,qBAAO,QAAQ,qBAAO,UAAU;AAC/H,UAAM,UAAU,aAAa;AAC7B,QAAI,OAAO,MAAM,UAAU,MAAM,KAAK;AAAA,MACpC,MAAM,4BAAW;AAAA,IACnB,CAAC;AACD,UAAM,UAAU,MAAM;AACtB,WAAO;AAAA,EACT,SAAS,KAAP;AACA,YAAQ,MAAM,KAAK,GAAG;AACtB,UAAM;AAAA,EACR;AACF;",
  "names": ["run_insert", "run_update", "run_delete"]
}
